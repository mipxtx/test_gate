package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"gate/graph/model"
)

// Search is the resolver for the Search field.
func (r *queryResolver) Search(ctx context.Context, query *string, limit *int, offset *int) (*model.SearchResult, error) {
	if query == nil {
		return nil, &Error{"query is empty"}
	}
	return Search(*query, *limit, *offset)
}

// FindByIds is the resolver for the FindByIds field.
func (r *queryResolver) FindByIds(ctx context.Context, ids []*int) ([]*model.Item, error) {
	var proxy []int
	for _, v := range ids {
		proxy = append(proxy, *v)
	}
	return Multiget(proxy)
}

// Result is the resolver for the result field.
func (r *searchResultResolver) Result(ctx context.Context, obj *model.SearchResult) ([]*model.Item, error) {
	return Multiget(obj.ResultIds)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// SearchResult returns SearchResultResolver implementation.
func (r *Resolver) SearchResult() SearchResultResolver { return &searchResultResolver{r} }

type queryResolver struct{ *Resolver }
type searchResultResolver struct{ *Resolver }
